from aiogram import F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputFile, \
    BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import sqlite3
import asyncio
import re
from typing import Dict, Tuple
from PIL import Image
from io import BytesIO

from handlers.bot_instance import dp, bot
from states.form import OnlineCheckState, InstructionState, Form
from utils.check_status_util import check_status
from utils.emails_util import send_email


def init_db():
    conn = sqlite3.connect('tracking.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tracking (
        tg_id INTEGER,
        steam_id TEXT,
        comment TEXT,
        last_status TEXT,
        PRIMARY KEY (tg_id, steam_id)
    )
    ''')

    conn.commit()
    conn.close()


init_db()

tracking_tasks: Dict[Tuple[int, str], asyncio.Task] = {}


@dp.message(Command("start"))
async def start_handler(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úâÔ∏è –ü–∏—Å—å–º–æ", callback_data="send_email")],
            [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instructions")],
            [InlineKeyboardButton(text="üü¢ Check Online", callback_data="online_status")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π:", reply_markup=keyboard)


@dp.callback_query(F.data == "send_email")
async def email_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ email, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ:")
    await state.set_state(Form.email)


@dp.message(Form.email)
async def get_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(Form.login)


@dp.message(Form.login)
async def get_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")
    await state.set_state(Form.operator)


@dp.message(Form.operator)
async def get_operator(message: Message, state: FSMContext):
    data = await state.update_data(operator=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–∏—Å—å–º–æ...")

    await send_email(
        to_email=data["email"],
        login=data["login"],
        operator=data["operator"]
    )
    await message.answer("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    await state.clear()


@dp.callback_query(F.data == "show_instructions")
async def show_instructions(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìñ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        )
    )
    await state.set_state(InstructionState.waiting_for_avatar)

@dp.message(InstructionState.waiting_for_avatar, F.photo)
async def process_avatar(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_bytes = await bot.download_file(file.file_path)

    try:
        base_image = Image.open("resources/base.png")
        avatar_image = Image.open(BytesIO(file_bytes.read()))

        avatar_image = avatar_image.resize((85, 85))

        avatar_image_second = avatar_image.resize((100, 100))

        base_image.paste(avatar_image, (1210, 190))

        base_image.paste(avatar_image_second, (1782, 175))

        output_buffer = BytesIO()
        base_image.save(output_buffer, format="PNG")
        output_buffer.seek(0)

        buffered_file = BufferedInputFile(file=output_buffer.getvalue(), filename="avatar.png")
        await message.answer_photo(photo=buffered_file)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    await state.clear()



@dp.callback_query(F.data == "online_status")
async def on_online_status(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîç –ß–µ–∫–µ—Ä —Å—Ç–∞—Ç—É—Å–∞\n‚ï∞ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞ –º–∞–º–æ–Ω—Ç–∞\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –º–∞–º–æ–Ω—Ç–∞:\n\n"
        "‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ: –ï—Å–ª–∏ –≤–ø–∏—Å–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ - –±–æ—Ç –≤—ã–∫–ª—é—á–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        )
    )
    await state.set_state(OnlineCheckState.waiting_for_profile_link)


@dp.message(OnlineCheckState.waiting_for_profile_link)
async def handle_online_status_link(message: Message, state: FSMContext):
    url = message.text.strip()
    match = re.fullmatch(r"https?://steamcommunity\.com/profiles/(\d{17})/?", url)

    if not match:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: https://steamcommunity.com/profiles/7656119...")
        return

    steam_id = match.group(1)
    tg_id = message.from_user.id

    conn = sqlite3.connect('tracking.db')
    cursor = conn.cursor()

    cursor.execute('SELECT 1 FROM tracking WHERE tg_id = ? AND steam_id = ?', (tg_id, steam_id))
    if cursor.fetchone():
        cursor.execute('DELETE FROM tracking WHERE tg_id = ? AND steam_id = ?', (tg_id, steam_id))
        conn.commit()

        task_key = (tg_id, steam_id)
        if task_key in tracking_tasks:
            tracking_tasks[task_key].cancel()
            del tracking_tasks[task_key]

        await message.answer(f"‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è {steam_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        await state.clear()
        return

    cursor.execute('SELECT COUNT(*) FROM tracking WHERE tg_id = ?', (tg_id,))
    count = cursor.fetchone()[0]

    if count >= 10:
        await message.answer("‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π (10).")
        await state.clear()
        return

    await state.update_data(steam_id=steam_id, url=url)
    await message.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:")
    await state.set_state(OnlineCheckState.waiting_for_comment)


@dp.message(OnlineCheckState.waiting_for_comment)
async def handle_profile_comment(message: Message, state: FSMContext):
    comment = message.text.strip()
    data = await state.get_data()
    steam_id = data['steam_id']
    url = data['url']
    tg_id = message.from_user.id

    conn = sqlite3.connect('tracking.db')
    cursor = conn.cursor()

    cursor.execute('INSERT INTO tracking (tg_id, steam_id, comment, last_status) VALUES (?, ?, ?, ?)',
                   (tg_id, steam_id, comment, "Currently Offline"))
    conn.commit()
    conn.close()

    task = asyncio.create_task(check_status(tg_id, steam_id, comment))
    tracking_tasks[(tg_id, steam_id)] = task

    await message.answer(f"‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞—á–∞—Ç–æ\n\n"
                         f"üìé {url}\n"
                         f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: \"{comment}\"")
    await state.clear()


@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úâÔ∏è –ü–∏—Å—å–º–æ", callback_data="send_email")],
            [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instructions")],
            [InlineKeyboardButton(text="üü¢ Check Online", callback_data="online_status")]
        ]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π:", reply_markup=keyboard)


async def restore_tracking_tasks():
    conn = sqlite3.connect('tracking.db')
    cursor = conn.cursor()
    cursor.execute('SELECT tg_id, steam_id, comment FROM tracking')
    rows = cursor.fetchall()
    conn.close()

    for tg_id, steam_id, comment in rows:
        task = asyncio.create_task(check_status(tg_id, steam_id, comment))
        tracking_tasks[(tg_id, steam_id)] = task
